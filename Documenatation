1. Grundidee: baue einen Wrapper um secure modules und verifiziere es. Nutze Div.-Module aus BA als Beispiel und wende es auf weitere Module an.

2. Ermittle die WCET und BCET für Div-Mod.

3. Erste Entwürfe
  localparam MIN_LATENCY = 0;
  localparam MAX_LATENCY = 9;

  property wcet_p;
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0)
    ##1 (serdiv.in_vld_i == 1'b1) ##0 (serdiv.flush_i == 1'b0) [*MAX_LATENCY]
  implies 
    (serdiv.out_vld_o == 1'b0)                   // Setup cycle
    ##1 (serdiv.out_vld_o == 1'b0)[*MAX_LATENCY] 
    ##1 (serdiv.out_vld_o == 1'b1); 	
  endproperty
  wcet_p_a: assert property (disable iff (serdiv.flush_i | !rst_ni) wcet_p);



property wcet1_p;
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0)
    ##1 (serdiv.in_vld_i == 1'b1)
    ##0 (serdiv.flush_i == 1'b0)&&(serdiv.out_vld_o == 1'b0)[*MAX_LATENCY]  // Setup cycle
    ##1 (serdiv.flush_i == 1'b0)
  implies
    ##(MAX_LATENCY+1) (serdiv.out_vld_o == 1'b1); 	
  endproperty
  wcet1_p_a: assert property (disable iff (!rst_ni) wcet1_p);

property bcet_p;
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0)
    ##1 (serdiv.in_vld_i == 1'b1)
    ##0 (serdiv.flush_i == 1'b0)[*MIN_LATENCY+1]  // + Setup cycle
  implies
    ##(MIN_LATENCY+1) (serdiv.out_vld_o == 1'b1);
endproperty
bcet_p_a: assert property (disable iff (!rst_ni) bcet_p);

4. Versuche TCL-Skript zur Automatisierung der WCET für fixe Values von a und b.
#get_counterexample_value
#get_counterexample_value -signals {serdiv.out_vld_o} checker_bind.wcet_p_a
#
#check -pass [ list checker_bind.bcet_p_a ]

5. Erster erfolgreicher Versuch die WCET zu ermitteln
#################
# WCET ? SETUP #
################

set script_path [file dirname [file normalize [info script]]]

#############################
# HELPER-FUNCTIONS & PARAMS #
#############################



#set var [list -1 0 1 [expr $WIDTH / 2] $WIDTH]

# Function to extract the WIDTH parameter from the Verilog file
proc get_width {file} {
    # Open the Verilog file and search for WIDTH parameter
    set fid [open $file r]
    set file_contents [read $fid]
    close $fid

    # Use regular expression to find WIDTH value
    if {[regexp {parameter WIDTH = (\d+)} $file_contents match width_value]} {
        return $width_value
    } else {
        error "WIDTH parameter not found in $file"
    }
}


#################################
# Design Setup and Verification #
#################################

read_verilog -golden  -pragma_ignore {}  -version sv2012 {$script_path/../common/cf_math_pkg.sv}
read_verilog -golden  -pragma_ignore {}  -version sv2012 {$script_path/../common/rvfi_pkg.sv}
read_verilog -golden  -pragma_ignore {}  -version sv2012 {$script_path/../common/riscv_pkg.sv}
read_verilog -golden  -pragma_ignore {}  -version sv2012 {$script_path/../common/ariane_dm_pkg.sv}
read_verilog -golden  -pragma_ignore {}  -version sv2012 {$script_path/../common/ariane_pkg.sv}
read_verilog -golden  -pragma_ignore {}  -version sv2012 {$script_path/../common/cv64a6_imafdc_sv39_config_pkg.sv}
read_verilog -golden  -pragma_ignore {}  -version sv2012 {$script_path/../common/lzc.sv}
read_verilog -golden  -pragma_ignore {}  -version sv2012 {$script_path/serdiv.sv}

set_elaborate_option -golden -verilog_parameter {WIDTH=8}

elaborate -golden

compile -golden

set_mode mv

read_sva -version {sv2012} {$script_path/serdiv_no_tidal.sva}

#######
#######
# RUN #
#######
#######

#############
# Get WIDTH #
#############

# Extract WIDTH from the serdiv_no_tidal.sva file
set sv_file [file join $script_path "serdiv_no_tidal.sva"]
set width [get_width $sv_file]

##########################
# Loop Witness Reachable #
##########################

# Initialize latency value
set latency 1
puts $latency
# Set stopping condition: twice the WIDTH
set max_latency [expr {$width * 2}]

# Initial Check to start
exec sed -i "s/localparam MAX_LATENCY = .*/localparam MAX_LATENCY = $latency;/" $sv_file
puts $latency
check  -all [get_checks]
while {($latency <= $max_latency) && (![string match "unreachable" [get_check_info -status -witness checker_bind.wcet_p_a]])} {


    puts "Testing MAX_LATENCY = $latency"

    # Update MAX_LATENCY in the property file
    exec sed -i "s/localparam MAX_LATENCY = .*/localparam MAX_LATENCY = $latency;/" $sv_file

    # Reload and rerun SVA
    after 1000
    read_sva
    check  -all [get_checks]

    # Increment latency for the next iteration
    incr latency
}


if {[string match "unreachable" [get_check_info -status -witness checker_bind.wcet_p_a]]} {
    puts "Loop finished. WCET is [expr {$latency - 3}]"
} else {
    puts "Loop finished without solution?"
}


6. INPUT hinzugefügt

module property_checker import ariane_pkg::*;
  #(parameter WIDTH = 8)
  (
  input clk_i, 
  input rst_ni
  );

  default clocking default_clk @(posedge clk_i); endclocking

  localparam WCET_LATENCY = 9;
  localparam MIN_LATENCY = 1;
  localparam MAX_LATENCY = 8;
  localparam INPUT_A_VAL = 8'b00111111;


property wcet_in_p; // Zum suchen der WCET, kann evtl durch wcet_in_2_p ersetzt werden.
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0) && (serdiv.op_a_i == INPUT_A_VAL)
    ##1 (serdiv.in_vld_i == 1'b1) && (serdiv.flush_i == 1'b0) && (serdiv.op_a_i == INPUT_A_VAL)
    ##1 (serdiv.in_vld_i == 1'b0) [*WCET_LATENCY]
  implies 
    (serdiv.out_vld_o == 1'b0)                   // Setup cycle
    ##1 (serdiv.out_vld_o == 1'b0)[*MAX_LATENCY] // All calc has to be finished before MAX_LATENCY --> Real Latency = MAX_LATENCY-1
    ##[1:WCET_LATENCY-MAX_LATENCY] (serdiv.out_vld_o == 1'b0); // Show, that there is no rising out_vld_o afterwards as well (up to WCET_LATENCY of the system) : Maybe not needed
    //##1 (serdiv.out_vld_o == 1'b1); 	
  endproperty
  wcet_in_p_a: assert property (disable iff (serdiv.flush_i | !rst_ni) wcet_in_p);

7. Update TCL

# Initialize latency value
set latency_wcet 1
# Set stopping condition: twice the WIDTH
set max_latency [expr {$width * 2}]

# Update MAX_LATENCY in the property file
exec sed -i "s/localparam MAX_LATENCY = .*/localparam MAX_LATENCY = $latency_wcet;/" $sv_file

# Initial Check to start
after 1000
check  -all [get_checks]
while {($latency_wcet <= $max_latency) && (![string match "unreachable" [get_check_info -status -witness checker_bind.wcet_in_p_a]])} {

    puts $latency_wcet
    # Update MAX_LATENCY in the property file
    exec sed -i "s/localparam MAX_LATENCY = .*/localparam MAX_LATENCY = $latency_wcet;/" $sv_file
    
    # Reload and rerun SVA - saving MAX_LATENCY takes time, because it's an extern action
    after 1000
    read_sva
    
    # Check witness
    compute_witness checker_bind.wcet_in_p_a
    #check -pass [ list checker_bind.wcet_p_a ]
    
    # Increment latency for the next iteration
    incr latency_wcet
    puts $latency_wcet
}

if {[string match "unreachable" [get_check_info -status -witness checker_bind.wcet_in_p_a]]} {
    # Output WCET: -3 because of: preparing cycle + unreachable cycle + incr latency_wcet
    puts "Loop finished. WCET is [expr {$latency_wcet - 3}]!"
    # Update MAX_LATENCY in the property file to actual max latency
    set adjusted_latency [expr {$latency_wcet - 2}]
    exec sed -i "s/localparam MAX_LATENCY = .*/localparam MAX_LATENCY = $adjusted_latency;/" $sv_file
} else {
    puts "Loop finished without solution!"
}

8. Add multiplier as comparison to serdiv
Change TCL for multiplier
Change SVA (if needed)

9. Multiplier kombinatorisch, daher nur 1 Zyklus? --> Testen und approven
Schreibe das TCL neu und schön
10. weiter Multiplier ausprobieren, evtl. von IBEX oder opencores, ansonsten einfach von GIT
11. RSA Modul überprüfen und WCET und BECT aufstellen. Evtl. auch DLaufzeiten entnehmen und abspeichern.

ACHTUNG: sobald ein proof gefunden wurde wird abgebrochen. ich sollte aber alles überprüfen, falls "hold-fail-hold" o.ä.

12. Figure out Best Case and Worst Case, then build loop around MPAND and MODULUS

13. Working Runtime Analysis. Can work with most significant bits, depending on granularity. Only fix values, no deep learning.



