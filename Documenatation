1. Grundidee: baue einen Wrapper um secure modules und verifiziere es. Nutze Div.-Module aus BA als Beispiel und wende es auf weitere Module an.

2. Ermittle die WCET und BCET für Div-Mod.

3. Erste Entwürfe
  localparam MIN_LATENCY = 0;
  localparam MAX_LATENCY = 9;

  property wcet_p;
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0)
    ##1 (serdiv.in_vld_i == 1'b1) ##0 (serdiv.flush_i == 1'b0) [*MAX_LATENCY]
  implies 
    (serdiv.out_vld_o == 1'b0)                   // Setup cycle
    ##1 (serdiv.out_vld_o == 1'b0)[*MAX_LATENCY] 
    ##1 (serdiv.out_vld_o == 1'b1); 	
  endproperty
  wcet_p_a: assert property (disable iff (serdiv.flush_i | !rst_ni) wcet_p);



property wcet1_p;
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0)
    ##1 (serdiv.in_vld_i == 1'b1)
    ##0 (serdiv.flush_i == 1'b0)&&(serdiv.out_vld_o == 1'b0)[*MAX_LATENCY]  // Setup cycle
    ##1 (serdiv.flush_i == 1'b0)
  implies
    ##(MAX_LATENCY+1) (serdiv.out_vld_o == 1'b1); 	
  endproperty
  wcet1_p_a: assert property (disable iff (!rst_ni) wcet1_p);

property bcet_p;
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0)
    ##1 (serdiv.in_vld_i == 1'b1)
    ##0 (serdiv.flush_i == 1'b0)[*MIN_LATENCY+1]  // + Setup cycle
  implies
    ##(MIN_LATENCY+1) (serdiv.out_vld_o == 1'b1);
endproperty
bcet_p_a: assert property (disable iff (!rst_ni) bcet_p);

4. Versuche TCL-Skript zur Automatisierung der WCET für fixe Values von a und b.
#get_counterexample_value
#get_counterexample_value -signals {serdiv.out_vld_o} checker_bind.wcet_p_a
#
#check -pass [ list checker_bind.bcet_p_a ]
