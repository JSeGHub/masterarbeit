// @lang=sva @ts=8

module property_checker import ariane_pkg::*;
  #(parameter WIDTH = 8)
  (
  input clk_i,
  input rst_ni
  );

  default clocking default_clk @(posedge clk_i); endclocking

  localparam MAX_LATENCY = 10;
  localparam INPUT_A_VAL = 8'b01111111;
  //localparam INPUT_B_VAL = 8'b00000001;
  localparam int INPUT_A_LIST[] = '{10, 20, 30, 40};
  //localparam int INPUT_B_LIST[] = '{10, 20, 30, 40};  




property wcet_in_p #(int LATENCY, int INPUT_A_VAL);
  (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0) && (serdiv.op_a_i == INPUT_A_VAL)
  ##1 (serdiv.in_vld_i == 1'b1) && (serdiv.flush_i == 1'b0) && (serdiv.op_a_i == INPUT_A_VAL)
  ##0 (serdiv.flush_i == 1'b0)[*LATENCY]
  |-> (serdiv.out_vld_o == 1'b0)
  ##1 (serdiv.out_vld_o == 1'b0)[*LATENCY]
  ##1 (serdiv.out_vld_o == 1'b1);
endproperty

/*genvar j, i;
generate 
  for (j = 0; j < $size(INPUT_A_LIST); j = j + 1) begin : input_a_loop
    for (i = 0; i <= MAX_LATENCY; i = i + 1) begin : latency_loop

      // Assertion with disable condition
      wcet_in_p_a: assert property (disable iff (serdiv.flush_i | !rst_ni) wcet_in_p#(i, INPUT_A_LIST[j]))
      else begin
        unreachable = 1;  // If assertion fails, set unreachable flag
        $display("HELP! INPUT_A=%0d, LATENCY=%0d.", INPUT_A_LIST[j], i);
      end
    end
  end
endgenerate

*/










/*
property wcet_p;
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0) && (serdiv.op_a_i == INPUT_A)
    ##1 (serdiv.in_vld_i == 1'b1) && (serdiv.flush_i == 1'b0) && (serdiv.op_a_i == INPUT_A)
    ##0 (serdiv.flush_i == 1'b0) [*MAX_LATENCY]
  implies 
    (serdiv.out_vld_o == 1'b0)                   // Setup cycle
    ##1 (serdiv.out_vld_o == 1'b0)[*MAX_LATENCY] 
    ##1 (serdiv.out_vld_o == 1'b1); 	
  endproperty
  wcet_p_a: assert property (disable iff (serdiv.flush_i | !rst_ni) wcet_p);


property wcet1_p;
    (serdiv.in_rdy_o == 1'b1) && (serdiv.in_vld_i == 1'b0) && (serdiv.flush_i == 1'b0)
    ##1 (serdiv.in_vld_i == 1'b1)
    ##0 (serdiv.flush_i == 1'b0)&&(serdiv.out_vld_o == 1'b0)[*MAX_LATENCY]  // Setup cycle
    ##1 (serdiv.flush_i == 1'b0)
  implies
    ##(MAX_LATENCY+1) (serdiv.out_vld_o == 1'b1); 	
  endproperty
  wcet1_p_a: assert property (disable iff (!rst_ni) wcet1_p);

*/


endmodule

bind serdiv property_checker #(.WIDTH(WIDTH)) checker_bind(.clk_i(clk_i), .rst_ni(rst_ni));



























































