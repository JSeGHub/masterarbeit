// @lang=sva @ts=8test

module property_checker
  #(parameter MPWID = 8 )
  (
  input clk_i,
  input rst_i
  );

  default clocking default_clk @(posedge clk_i); endclocking

  `include "tidal.sv"

`begin_tda(ops)

  localparam T_WCET = 9;
  localparam T_BCET = 1;

  property bcet_p;
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*T_BCET+1]
  implies
    t ##(T_BCET) (modmult.ready == 1'b0);
  endproperty
  bcet_p_a: assert property (disable iff (rst_i) bcet_p );

  property wcet_p;
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*T_WCET+1] and
    t ##1 (modmult.ready == 1'b0) [*T_WCET]
  implies    
    t ##(T_WCET+1) (modmult.ready == 1'b1);
  endproperty
  wcet_p_a: assert property (disable iff (rst_i) wcet_p );

`end_tda


  localparam int INPUT[8] = '{0, 1, 2, 3, 4, 5, 6, 7};
  localparam T_WCET_IN = 10;
  localparam T_BCET_IN = 1;

 genvar a,b,c,ts;
  // Property for modmult.mpand_0_zero
  property mpand_0_zero_p(ts);
    t ##0 (modmult.mpand[MPWID-1:MPWID-1] == 1'b1) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mpand_0_zero
         mpand_0_zero_p_a: assert property (disable iff (rst_i) mpand_0_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mpand_1_zero
  property mpand_1_zero_p(ts);
    t ##0 (modmult.mpand[MPWID-1:MPWID-2] == 2'b01) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mpand_1_zero
         mpand_1_zero_p_a: assert property (disable iff (rst_i) mpand_1_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mpand_2_zero
  property mpand_2_zero_p(ts);
    t ##0 (modmult.mpand[MPWID-1:MPWID-3] == 3'b001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mpand_2_zero
         mpand_2_zero_p_a: assert property (disable iff (rst_i) mpand_2_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mpand_3_zero
  property mpand_3_zero_p(ts);
    t ##0 (modmult.mpand[MPWID-1:MPWID-4] == 4'b0001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mpand_3_zero
         mpand_3_zero_p_a: assert property (disable iff (rst_i) mpand_3_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mpand_4_zero
  property mpand_4_zero_p(ts);
    t ##0 (modmult.mpand[MPWID-1:MPWID-5] == 5'b00001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mpand_4_zero
         mpand_4_zero_p_a: assert property (disable iff (rst_i) mpand_4_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mpand_5_zero
  property mpand_5_zero_p(ts);
    t ##0 (modmult.mpand[MPWID-1:MPWID-6] == 6'b000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mpand_5_zero
         mpand_5_zero_p_a: assert property (disable iff (rst_i) mpand_5_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mpand_6_zero
  property mpand_6_zero_p(ts);
    t ##0 (modmult.mpand[MPWID-1:MPWID-7] == 7'b0000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mpand_6_zero
         mpand_6_zero_p_a: assert property (disable iff (rst_i) mpand_6_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mpand_7_zero
  property mpand_7_zero_p(ts);
    t ##0 (modmult.mpand[MPWID-1:MPWID-8] == 8'b00000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mpand_7_zero
         mpand_7_zero_p_a: assert property (disable iff (rst_i) mpand_7_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mplier_0_zero
  property mplier_0_zero_p(ts);
    t ##0 (modmult.mplier[MPWID-1:MPWID-1] == 1'b1) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mplier_0_zero
         mplier_0_zero_p_a: assert property (disable iff (rst_i) mplier_0_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mplier_1_zero
  property mplier_1_zero_p(ts);
    t ##0 (modmult.mplier[MPWID-1:MPWID-2] == 2'b01) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mplier_1_zero
         mplier_1_zero_p_a: assert property (disable iff (rst_i) mplier_1_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mplier_2_zero
  property mplier_2_zero_p(ts);
    t ##0 (modmult.mplier[MPWID-1:MPWID-3] == 3'b001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mplier_2_zero
         mplier_2_zero_p_a: assert property (disable iff (rst_i) mplier_2_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mplier_3_zero
  property mplier_3_zero_p(ts);
    t ##0 (modmult.mplier[MPWID-1:MPWID-4] == 4'b0001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mplier_3_zero
         mplier_3_zero_p_a: assert property (disable iff (rst_i) mplier_3_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mplier_4_zero
  property mplier_4_zero_p(ts);
    t ##0 (modmult.mplier[MPWID-1:MPWID-5] == 5'b00001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mplier_4_zero
         mplier_4_zero_p_a: assert property (disable iff (rst_i) mplier_4_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mplier_5_zero
  property mplier_5_zero_p(ts);
    t ##0 (modmult.mplier[MPWID-1:MPWID-6] == 6'b000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mplier_5_zero
         mplier_5_zero_p_a: assert property (disable iff (rst_i) mplier_5_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mplier_6_zero
  property mplier_6_zero_p(ts);
    t ##0 (modmult.mplier[MPWID-1:MPWID-7] == 7'b0000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mplier_6_zero
         mplier_6_zero_p_a: assert property (disable iff (rst_i) mplier_6_zero_p (ts));
      end
  endgenerate

  // Property for modmult.mplier_7_zero
  property mplier_7_zero_p(ts);
    t ##0 (modmult.mplier[MPWID-1:MPWID-8] == 8'b00000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: mplier_7_zero
         mplier_7_zero_p_a: assert property (disable iff (rst_i) mplier_7_zero_p (ts));
      end
  endgenerate

  // Property for modmult.modulus_0_zero
  property modulus_0_zero_p(ts);
    t ##0 (modmult.modulus[MPWID-1:MPWID-1] == 1'b1) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: modulus_0_zero
         modulus_0_zero_p_a: assert property (disable iff (rst_i) modulus_0_zero_p (ts));
      end
  endgenerate

  // Property for modmult.modulus_1_zero
  property modulus_1_zero_p(ts);
    t ##0 (modmult.modulus[MPWID-1:MPWID-2] == 2'b01) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: modulus_1_zero
         modulus_1_zero_p_a: assert property (disable iff (rst_i) modulus_1_zero_p (ts));
      end
  endgenerate

  // Property for modmult.modulus_2_zero
  property modulus_2_zero_p(ts);
    t ##0 (modmult.modulus[MPWID-1:MPWID-3] == 3'b001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: modulus_2_zero
         modulus_2_zero_p_a: assert property (disable iff (rst_i) modulus_2_zero_p (ts));
      end
  endgenerate

  // Property for modmult.modulus_3_zero
  property modulus_3_zero_p(ts);
    t ##0 (modmult.modulus[MPWID-1:MPWID-4] == 4'b0001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: modulus_3_zero
         modulus_3_zero_p_a: assert property (disable iff (rst_i) modulus_3_zero_p (ts));
      end
  endgenerate

  // Property for modmult.modulus_4_zero
  property modulus_4_zero_p(ts);
    t ##0 (modmult.modulus[MPWID-1:MPWID-5] == 5'b00001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: modulus_4_zero
         modulus_4_zero_p_a: assert property (disable iff (rst_i) modulus_4_zero_p (ts));
      end
  endgenerate

  // Property for modmult.modulus_5_zero
  property modulus_5_zero_p(ts);
    t ##0 (modmult.modulus[MPWID-1:MPWID-6] == 6'b000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: modulus_5_zero
         modulus_5_zero_p_a: assert property (disable iff (rst_i) modulus_5_zero_p (ts));
      end
  endgenerate

  // Property for modmult.modulus_6_zero
  property modulus_6_zero_p(ts);
    t ##0 (modmult.modulus[MPWID-1:MPWID-7] == 7'b0000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: modulus_6_zero
         modulus_6_zero_p_a: assert property (disable iff (rst_i) modulus_6_zero_p (ts));
      end
  endgenerate

  // Property for modmult.modulus_7_zero
  property modulus_7_zero_p(ts);
    t ##0 (modmult.modulus[MPWID-1:MPWID-8] == 8'b00000001) and
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*ts+1]
  implies 
    t ##(ts) (modmult.ready == 1'b0) and
    t ##(ts+1) (modmult.ready == 1'b1);
  endproperty

  generate
      for (ts = T_BCET_IN; ts < T_WCET_IN; ts++) begin: modulus_7_zero
         modulus_7_zero_p_a: assert property (disable iff (rst_i) modulus_7_zero_p (ts));
      end
  endgenerate

endmodule
bind modmult property_checker #(.MPWID(MPWID)) checker_bind(.clk_i(clk), .rst_i(reset));
