// @lang=sva @ts=8

module property_checker
  // Adjust this parameter before elaboration with
  // set_elaborate_option -golden -vhdl_generic {mpwid=4}
  #(parameter MPWID = 4)
  (
  input clk_i,
  input rst_i
  );

  default clocking default_clk @(posedge clk_i); endclocking

  `include "tidal.sv"

`begin_tda(ops)


  localparam [MPWID-1:0] mpwid_zero = '0;
  localparam T_WCET = 8;
  localparam T_BCET = 1;


  sequence reset_sequence;
    (rst_i == 1'b1);
  endsequence


  sequence t_finish;
    await_o(t, 2, modmult.ready == 1'b1, MPWID);
  endsequence


  property reset_p;
    reset_sequence
    |=>
    t ##0 (modmult.ready == 1'b1);
  endproperty
  reset_p_a: assert property (reset_p);

  property idle_p;
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.ds    == 1'b0)
  implies
    t ##1 (modmult.ready == 1'b1) and
    t ##1 (modmult.product == $past(modmult.product));
  endproperty
  idle_p_a: assert property (idle_p);


  /*
   * Regular modular multiplication if (modulus > mpand) && (modulus > mplier)
   * This operation takes 2 + MPWID - lzc(mplier) clock cycles
   * The constraint is formulated according to the specification
   */
  property modmult_p;
  logic [2*MPWID-1:0] mpand_v, mplier_v;
  logic [MPWID-1:0] modulus_v;
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.ds    == 1'b1) and
    t ##0 (modmult.modulus > modmult.mpand) and
    t ##0 (modmult.modulus > modmult.mplier) and

    t ##0 set_freeze(mpand_v,   {mpwid_zero, modmult.mpand  }) and
    t ##0 set_freeze(mplier_v,  {mpwid_zero, modmult.mplier }) and
    t ##0 set_freeze(modulus_v,              modmult.modulus )
  implies
    during_o(t, 1, t_finish, -1, (modmult.ready == 1'b0)) and
    t_finish ##0 (modmult.ready == 1'b1) and
    t_finish ##0 (modmult.product == (mpand_v * mplier_v) % modulus_v);
  endproperty
  modmult_p_a: assert property (disable iff (rst_i) modmult_p);


  /*
   * Unconstrained modular multiplication
   * This operation takes 2 + MPWID - lzc(mplier) clock cycles
   * In case (modulus <= mpand) or (modulus <= mplier), this produces a wrong result
   */
  property modmult_general_p;
  logic [2*MPWID-1:0] mpand_v, mplier_v;
  logic [MPWID-1:0] modulus_v;
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.ds    == 1'b1)
  implies
    during_o(t, 1, t_finish, -1, (modmult.ready == 1'b0)) and
    t_finish ##0 (modmult.ready == 1'b1);
  endproperty
  modmult_general_p_a: assert property (disable iff (rst_i) modmult_general_p);
    

  //integer t_wcet; // Worst case execution time: MPWID + 2 cycles


  property bcet_p;
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*T_BCET+1]
  implies
    t ##(T_BCET) (modmult.ready == 1'b0);
  endproperty
  bcet_p_a: assert property (disable iff (rst_i) bcet_p);


  property wcet_p;
    t ##0 (modmult.ds    == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds    == 1'b0) [*T_WCET+1] and
    t ##1 (modmult.ready == 1'b0) [*T_WCET]
  implies    
    t ##(T_WCET+1) (modmult.ready == 1'b1);
  endproperty
  wcet_p_a: assert property (disable iff (rst_i) wcet_p);



`end_tda


  localparam WIDTH_IN = 7;
  localparam int INPUT_A[WIDTH_IN] = '{0,1,2,4,8,12,15};
  localparam int INPUT_B[WIDTH_IN] = '{0,1,2,4,8,12,15};
  localparam T_WCET_IN = 6;
  localparam T_BCET_IN = 1;




property idle_p;
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.ds    == 1'b0)
  implies
    t ##1 (modmult.ready == 1'b1) and
    t ##1 (modmult.product == $past(modmult.product));
  endproperty
  idle_p_a: assert property (idle_p);


property wcet_in_p(a,b,ts);
    t ##0 (modmult.ds    == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.mplier == INPUT_A[a]) && (modmult.modulus == INPUT_B[b]) and
    t ##1 (modmult.ds    == 1'b0) [*ts+1] and
    t ##1 (modmult.ready ==1'b0) [*ts]
  implies 
    t ##(ts+1) (modmult.ready == 1'b1);
endproperty
//wcet_in_p_a: assert property (disable iff (rst_i) wcet_in_p(0,0,1));


genvar a,b,ts;
  generate
      for (a = 0; a < $size(INPUT_A); a++) begin
        for (b = 0; b < $size(INPUT_B); b++) begin
	  for (ts = T_BCET_IN-1; ts < T_WCET_IN; ts++) begin
            wcet_in_p_a: assert property (disable iff (rst_i) wcet_in_p (a,b,ts));
	  end
        end
	//if (a = $size(INPUT_A)-1) 
      end
  endgenerate

endmodule

bind modmult property_checker #(.MPWID(MPWID)) checker_bind(.clk_i(clk), .rst_i(reset));