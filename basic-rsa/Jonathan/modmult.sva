// @lang=sva @ts=8

module property_checker
  // Adjust this parameter before elaboration with
  // set_elaborate_option -golden -vhdl_generic {mpwid=4}
  #(parameter MPWID = 4)
  (
  input clk_i,
  input rst_i
  );

  default clocking default_clk @(posedge clk_i); endclocking

  `include "tidal.sv"

`begin_tda(ops)


  localparam [MPWID-1:0] mpwid_zero = '0;
  localparam T_WCET = 5;
  localparam T_BCET = 1;

  property bcet_p;
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds == 1'b0) [*T_BCET+1]
  implies
    t ##(T_BCET) (modmult.ready == 1'b0);
  endproperty
 bcet_p_a: assert property (disable iff (rst_i) bcet_p);

  property wcet_p;
    t ##0 (modmult.ds    == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##1 (modmult.ds    == 1'b0) [*T_WCET+1] and
    t ##1 (modmult.ready == 1'b0) [*T_WCET]
  implies    
    t ##(T_WCET+1) (modmult.ready == 1'b1);
  endproperty
  wcet_p_a: assert property (disable iff (rst_i) wcet_p);

`end_tda


  localparam WIDTH_IN = 6;
  localparam int INPUT_A[WIDTH_IN] = '{0,1,2,4,8,15};
  localparam int INPUT_B[WIDTH_IN] = '{0,1,2,4,8,15};
  localparam T_WCET_IN = 6;
  localparam T_BCET_IN = 1;


/*
property wcet_in_p(a,b,ts);
    t ##0 (modmult.ds    == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.mplier == INPUT_A[a]) && (modmult.modulus == INPUT_B[b]) and
    t ##1 (modmult.ds    == 1'b0) [*ts+1] and
    t ##1 (modmult.ready ==1'b0) [*ts]
  implies 
    t ##(ts+1) (modmult.ready == 1'b1);
endproperty
//wcet_in_p_a: assert property (disable iff (rst_i) wcet_in_p(0,0,1));
*/

property wcet_in_2_p(a,ts);
    t ##0 (modmult.ds    == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.mplier == INPUT_A[a]) and
    t ##1 (modmult.ds    == 1'b0) [*ts+1] and
    t ##1 (modmult.ready ==1'b0) [*ts]
  implies 
    t ##(ts+1) (modmult.ready == 1'b1);
endproperty
//wcet_in_2_p_a: assert property (disable iff (rst_i) wcet_in_2_p(0,1));

property wcet_in_3_p(a, ts, signal_name);
    t ##0 (modmult.ds == 1'b1) and
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.signal_name == INPUT_A[a]) and  // signal_name is parameterized
    t ##1 (modmult.ds == 1'b0) [*ts+1] and
    t ##1 (modmult.ready == 1'b0) [*ts]
  implies 
    t ##(ts+1) (modmult.ready == 1'b1);
endproperty

// For modmult.mplier

//wcet_in_3_p_a: assert property (disable iff (rst_i) wcet_in_3_p (1,0,"mplier"));



/*
genvar a,ts;
  generate
      for (a = 0; a < 6; a++) begin//$size(INPUT_A); a++) begin
	 for (ts = 0; ts < 6; ts++) begin //1-T_BCET_IN-1; ts < T_WCET_IN; ts++) begin
	    wcet_in_2_p_a: assert property (disable iff (rst_i) wcet_in_2_p (a,ts));
	 end
      end
  endgenerate
*/
endmodule

bind modmult property_checker #(.MPWID(MPWID)) checker_bind(.clk_i(clk), .rst_i(reset));