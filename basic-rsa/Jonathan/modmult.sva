// @lang=sva @ts=8

// This SVA file defines formal properties for verifying a modular multiplication (modmult) unit.
// The properties check the reset behavior, idle state stability, and the operation correctness 
// (both for regular and unconstrained modular multiplication).

module property_checker
  // Parameter MPWID defines the bit-width used for the multiplication operands.
  // Set this parameter prior to elaboration with the appropriate key width.
  #(parameter MPWID = 4)
  (
  input clk_i,  // Clock signal
  input rst_i   // Active high reset
  );

  // Establish a default clocking block for using 't' timestamps in assertions.
  default clocking default_clk @(posedge clk_i); endclocking

  // Include OneSpin-specific SVA library that provides helper sequences and constructs.
  `include "tidal.sv"

`begin_tda(ops)

  // Define a zero constant vector of width MPWID.
  localparam [MPWID-1:0] mpwid_zero = '0; 

  // -----------------------------------------------------------
  // Sequences
  // -----------------------------------------------------------

  // Sequence that identifies the reset condition.
  sequence reset_sequence;
    (rst_i == 1'b1);
  endsequence

  // Sequence that waits for the modular multiplication operation to finish.
  // Here, 'await_o' waits for modmult.ready to be asserted within MPWID clock cycles,
  // starting after a delay of 2 cycles.
  sequence t_finish;
    await_o(t, 2, modmult.ready == 1'b1, MPWID);
  endsequence

  // -----------------------------------------------------------
  // Properties
  // -----------------------------------------------------------

  // reset_p:
  // Checks that when in reset, the modmult unit immediately indicates readiness.
  property reset_p;
    reset_sequence
    |=>
    t ##0 (modmult.ready == 1'b1);
  endproperty
  reset_p_a: assert property (reset_p);

  // idle_p:
  // Verifies that if the module is idle (ready asserted and ds de-asserted),
  // then in the next cycle, the module remains idle and the product output is stable.
  property idle_p;
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.ds    == 1'b0)
  implies
    t ##1 (modmult.ready == 1'b1) and
    t ##1 (modmult.product == $past(modmult.product));
  endproperty
  idle_p_a: assert property (idle_p);

  /* 
   * modmult_p:
   * Regular modular multiplication property.
   * It verifies that product equals (mpand * mplier) mod modulus when:
   *  - Both modmult.mpand and modmult.mplier are less than modmult.modulus.
   *  - The operation latency matches the expected behavior. 
   * The set_freeze constructs latch the input values at the assertion time.
   */
  property modmult_p;
  logic [2*MPWID-1:0] mpand_v, mplier_v;
  logic [MPWID-1:0] modulus_v;
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.ds    == 1'b1) and
    t ##0 (modmult.modulus > modmult.mpand) and
    t ##0 (modmult.modulus > modmult.mplier) and

    t ##0 set_freeze(mpand_v,   {mpwid_zero, modmult.mpand  }) and
    t ##0 set_freeze(mplier_v,  {mpwid_zero, modmult.mplier }) and
    t ##0 set_freeze(modulus_v,              modmult.modulus )
  implies
    during_o(t, 1, t_finish, -1, (modmult.ready == 1'b0)) and
    t_finish ##0 (modmult.ready == 1'b1) and
    t_finish ##0 (modmult.product == (mpand_v * mplier_v) % modulus_v);
  endproperty
  modmult_p_a: assert property (disable iff (rst_i) modmult_p);

  /* 
   * modmult_general_p: 
   * Unconstrained modular multiplication property.
   * This property verifies that the modmult unit eventually asserts ready,
   * regardless of the relationship between modulus, mpand, and mplier.
   * Note: When modulus is not greater than both operands, the resulting product may be incorrect.
   */
  property modmult_general_p;
  logic [2*MPWID-1:0] mpand_v, mplier_v;
  logic [MPWID-1:0] modulus_v;
    t ##0 (modmult.ready == 1'b1) and
    t ##0 (modmult.ds    == 1'b1)
  implies
    during_o(t, 1, t_finish, -1, (modmult.ready == 1'b0)) and
    t_finish ##0 (modmult.ready == 1'b1);
  endproperty
  modmult_general_p_a: assert property (disable iff (rst_i) modmult_general_p);
    
`end_tda

endmodule

// Binding the above property checker to the actual modmult module instance.
// This allows formal verification tools to check these properties on the design.
bind modmult property_checker #(.MPWID(MPWID)) checker_bind(.clk_i(clk), .rst_i(reset));